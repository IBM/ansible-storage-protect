#- name: Get the SP Server facts
#  hosts: local
#  gather_facts: no
#  become: yes
#  environment:
#    STORAGE_PROTECT_SERVERNAME: "{{ lookup('env', 'STORAGE_PROTECT_SERVERNAME') }}"
#    STORAGE_PROTECT_USERNAME: "{{ lookup('env', 'STORAGE_PROTECT_USERNAME') }}"
#    STORAGE_PROTECT_PASSWORD: "{{ lookup('env', 'STORAGE_PROTECT_PASSWORD') }}"
#  roles:
#    - role: sp_server_facts
#      vars:
#        sp_server_facts_flags:
#          q_status: true
#          q_monitorsettings: true
#          q_db: true
#          q_dbspace: true
#          q_log: true
#          q_domain: true
#          q_copygroup: true
#          q_replrule: true
#          q_devclass: true
#          q_mgmtclass: true
#          q_stgpool: true


#---
#- name: Install BA Client
#  hosts: all
#  tasks:
#    - name: copy the module on the remote host
#      ansible.builtin.synchronize:
#        src: "./8.1.24.0-TIV-TSMBAC-LinuxX86.tar"
#        dest: "/tmp/"
#      register: copy_result

#    - name: Install ba client
#      install_ba_client:
#        install: false
##        path: /tmp/8.1.24.0-TIV-TSMBAC-LinuxX86.tar
##        dest_folder: /opt/baClient
#      register: result
#
#    - name: Show the result
#      debug:
#        var: result.result.system_info


#    - name: copy the module on the remote host
#      ansible.builtin.synchronize:
#        src: "./8.1.24.0-TIV-TSMBAC-LinuxX86.tar"
#        dest: "/tmp/"
#        compress: yes
#    - name: Run system commands and get output
#      install_ba_client:
#        install: true
#        path: /tmp/8.1.24.0-TIV-TSMBAC-LinuxX86.tar
#        dest_folder: /opt/baClient
#      register: result



#===== tests =====
#- name: Check system compatibility
#  hosts: all
#  tasks:
#    - name: Install ba client
#      install_ba_client:
#        install: false
#      register: result
#
#    - name: Check architecture compatibility
#      set_fact:
#        architecture_compatible: "{{ 'x86_64' in result.result.system_info.Architecture }}"
#
#    - name: Check disk space compatibility
#      set_fact:
#        disk_space_compatible: "{{ result.result.system_info['Filesystem Disk Space'].avail | regex_replace('G', '') | float > 1.4 }}"
#
#    - name: Check filesystem compatibility
#      set_fact:
#        filesystem_compatible: "{{ result.result.system_info['Filesystem Type'] in ['xfs', 'ext2', 'ext3'] }}"
#
#    - name: Check Java installation
#      set_fact:
#        java_installed: "{{ 'Java' not in result.result.system_info['Java Version'] | lower }}"
#
#    - name: Display compatibility results
#      debug:
#        msg: |
#          Architecture check: {{ architecture_compatible }}
#          Disk space check: {{ disk_space_compatible }}
#          Filesystem check: {{ filesystem_compatible }}
#          Java installed: {{ java_installed }}
#
#    - name: Show if system is compatible
#      debug:
#        msg: "System is compatible"
#      when: architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed
#
#    - name: Show if system is not compatible
#      debug:
#        msg: "System is incompatible"
#      when: not (architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed)
#
#    - name: Create /opt/baClient directory
#      ansible.builtin.file:
#        path: /opt/baClient
#        state: directory
#        mode: '0755'
#      when: architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed
#
#    - name: Extract provided .tar file
#      ansible.builtin.unarchive:
#        src: /opt/8.1.24.0-TIV-TSMBAC-LinuxX86.tar
#        dest: /opt/baClient
#        remote_src: yes
#      when: architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed
#      register: extraction_result
#
#    - name: Find extracted files
#      ansible.builtin.find:
#        paths: /opt/baClient
#        recurse: yes
#      register: extracted_files
#
#    - name: Display the list of extracted files
#      debug:
#        msg: "Extracted files: {{ extracted_files.files | map(attribute='path') | list }}"
#      when: extracted_files is defined and extracted_files.files | length > 0
#
#

#
#- name: Check system compatibility
#  hosts: all
#  tasks:
#    - name: Install ba client
#      install_ba_client:
#        install: false
#      register: result
#
#    - name: Check architecture compatibility
#      set_fact:
#        architecture_compatible: "{{ 'x86_64' in result.result.system_info.Architecture }}"
#
#    - name: Check disk space compatibility
#      set_fact:
#        disk_space_compatible: "{{ result.result.system_info['Filesystem Disk Space'].avail | regex_replace('G', '') | float > 1.4 }}"
#
#    - name: Check filesystem compatibility
#      set_fact:
#        filesystem_compatible: "{{ result.result.system_info['Filesystem Type'] in ['xfs', 'ext2', 'ext3'] }}"
#
#    - name: Check Java installation
#      set_fact:
#        java_installed: "{{ 'Java' not in result.result.system_info['Java Version'] | lower }}"
#
#    - name: Display compatibility results
#      debug:
#        msg: |
#          Architecture check: {{ architecture_compatible }}
#          Disk space check: {{ disk_space_compatible }}
#          Filesystem check: {{ filesystem_compatible }}
#          Java installed: {{ java_installed }}
#
#    - name: Show if system is compatible
#      debug:
#        msg: "System is compatible"
#      when: architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed
#
#    - name: Show if system is not compatible
#      debug:
#        msg: "System is incompatible"
#      when: not (architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed)
#
#    - name: Create /opt/baClient directory
#      ansible.builtin.file:
#        path: /opt/baClient
#        state: directory
#        mode: '0755'
#      when: architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed
#
#    - name: Extract provided .tar file
#      ansible.builtin.unarchive:
#        src: /opt/8.1.24.0-TIV-TSMBAC-LinuxX86.tar
#        dest: /opt/baClient
#        remote_src: yes
#      when: architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed
#      register: extraction_result
#
#    - name: Find extracted files
#      ansible.builtin.find:
#        paths: /opt/baClient
#        recurse: yes
#      register: extracted_files
#
#    - name: Display the list of extracted files
#      debug:
#        msg: "Extracted files: {{ extracted_files.files | map(attribute='path') | list }}"
#      when: extracted_files is defined and extracted_files.files | length > 0
#
#    # Install GPG key for package validation
#    - name: Import GPG key for package validation
#      command: rpm --import /opt/baClient/RPM-GPG-KEY-ibmpkg
#      when: architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed
#
#    # Install GSKit first
#    - name: Install GSKit crypt library
#      ansible.builtin.yum:
#        name: /opt/baClient/gskcrypt64-8.0.55.31.linux.x86_64.rpm
#        state: present
#      when: architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed
#
#    - name: Install GSKit SSL library
#      ansible.builtin.yum:
#        name: /opt/baClient/gskssl64-8.0.55.31.linux.x86_64.rpm
#        state: present
#      when: architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed
#
#
#    - name: Check if TIVsm-API64 is installed
#      command: rpm -q TIVsm-API64
#      register: check_api64
#      ignore_errors: true
#
#    - name: Install TIVsm-API64 package
#      command: rpm -ivh /opt/baClient/TIVsm-API64.x86_64.rpm
#      become: true
#      args:
#        chdir: /opt/baClient
#      when: check_api64.rc != 0
#
#    - name: Check if TIVsm-APIcit is installed
#      command: rpm -q TIVsm-APIcit
#      register: check_apicit
#      ignore_errors: true
#
#    - name: Install TIVsm-APIcit package
#      command: rpm -ivh /opt/baClient/TIVsm-APIcit.x86_64.rpm
#      become: true
#      args:
#        chdir: /opt/baClient
#      when: check_apicit.rc != 0
#
#    - name: Check if BA package is installed or not
#      command: rpm -q TIVsm-BA
#      register: check_ba
#      ignore_errors: true
#
#    - name: Install BA package
#      command: rpm -ivh /opt/baClient/TIVsm-BA.x86_64.rpm
#      become: true
#      args:
#        chdir: /opt/baClient
#      when: check_ba.rc != 0
#
#    - name: Check if BAcit package is installed or not
#      command: rpm -q TIVsm-BAcit
#      register: check_bacit
#      ignore_errors: true
#
#    - name: Install BAIcit package
#      command: rpm -ivh /opt/baClient/TIVsm-BAcit.x86_64.rpm
#      become: true
#      args:
#        chdir: /opt/baClient
#      when: check_bacit.rc != 0
#
#

#======= install_ba_client ========

#---
#- name: Run system info collection and compatibility check
#  hosts: all
#  gather_facts: yes
#  roles:
#    - collect_system_info
#    - install_ba_client'



#======dsm_opt==============
#---
#- name: Configure dsm.opt with additional settings
#  hosts: all
#  roles:
#    - role: dsm_opt
#      vars:
#        dsm_opt_servername: "cabin4"
#        dsm_opt_password: "1235"
#        dsm_opt_compression: "no"
#        dsm_opt_state: present




#===== install,upgrade, downgrade =====
#---
#- name: Install, Upgrade, or Downgrade BA Client
#  hosts: all
#  tasks:
#    - name: Collect system info
#      include_role:
#        name: collect_system_info
#
##    - name: Downgrade BA Client to version 8.1.23.0
##      vars:
##        downgrade: false
##        new_version: "8.1.23"
##        tar_file_path: "./8.1.23.0-TIV-TSMBAC-LinuxX86.tar"
##      include_role:
##        name: install_ba_client
#
#    - name: Install or upgrade BA Client to version 8.1.24.0
#      vars:
#        tar_file_path: "./8.1.23.0-TIV-TSMBAC-LinuxX86.tar"
#      include_role:
#        name: install_ba_client
#





#---
#- name: Install BA Client
#  hosts: all
#  become: true
#  tasks:
#  roles:
#    - role: collect_system_info
#    - role: install_ba_client
#      vars:
#        action: "upgrade"
#        tar_file_path: "./8.1.23.0-TIV-TSMBAC-LinuxX86.tar"
#

#- name: Install BA Client
#  hosts: group1
#  become: true
#  tasks:
#  roles:
#    - role: collect_system_info
#    - role: install_ba_client
#      vars:
#        state: present
#        version: "8.1.25"
#        repo_host: group2
#        target_hosts: group1

#- name: Install BA Client
#  hosts: group1
#  become: true
#  vars:
#    ba_client_state: absent
#    ba_client_version: "8.1.23"
##    ba_client_repo_host: group2
##    ba_client_target_hosts: group1
#  roles:
##    - role: collect_system_info
#    - role: install_ba_client
#

#- name: Upgrade BA Client
#  hosts: all
#  become: true
#  vars_files:
#    - defaults/main.yml

#  roles:
#    - role: ba_client
#      vars:
#        action: "upgrade"


#---
#- name: Configure dsm.opt parameters
#  hosts: group1
#  roles:
#    - role: dsm_opt
#      vars:
#        dsm_opt_state: absent
#        dsm_opt_parameters:
#          dsm_opt_servername: "NewServer"
##          dsm_opt_nodename: "NewClient"
#          dsm_opt_domain: "C: D: E:\\UserData"
#          dsm_opt_password: "mypassword"
#          dsm_opt_password_access: "generate"



#        dsm_opt_include:
#          - "/custom/app/.../*"

#- name: Minimal dsm.opt parsing
#  hosts: all
#  vars:
#    dsm_opt_file_path: "/opt/tivoli/tsm/client/ba/bin/dsm.opt"
#  tasks:
#    - name: Check if dsm.opt file exists on the remote machine
#      stat:
#        path: "{{ dsm_opt_file_path }}"
#      register: dsm_opt_status
#
#    - name: Read the content of dsm.opt if it exists
#      slurp:
#        src: "{{ dsm_opt_file_path }}"
#      register: dsm_opt_content
#      when: dsm_opt_status.stat.exists
#
#    - name: Show raw file content
#      debug:
#        msg: "{{ dsm_opt_content.content | b64decode }}"
#      when: dsm_opt_status.stat.exists
#
#    - name: Prepare list of lines
#      set_fact:
#        dsm_opt_lines: "{{ (dsm_opt_content.content | b64decode).split('\n') }}"
#      when: dsm_opt_status.stat.exists
#
#    - name: Parse dsm.opt lines into a dictionary
#      set_fact:
#        # Merge a small {key: value} dict into dsm_opt_vars
#        dsm_opt_vars: "{{ dsm_opt_vars | default({}) | combine({ splitted[0]: splitted[1] | default('') }) }}"
#      loop: "{{ dsm_opt_lines }}"
#      vars:
#        splitted: "{{ item.split(None, 1) }}"    # split on first whitespace
#      when: >
#        dsm_opt_status.stat.exists
#        and splitted|length >= 1
#        and splitted[0] != ''
#        and not splitted[0].startswith('#')
#
#    - name: Debug parsed dsm.opt variables
#      debug:
#        var: dsm_opt_vars
#      when: dsm_opt_status.stat.exists



#===== working=======

#- name: Check if specified version exists locally
#  hosts: group2
#  tasks:
#    - name: Define base directory containing .tar files
#      set_fact:
#        base_dir: "/Users/sarthak/Desktop/clientRepo"
#
#    - name: Find all .tar files in the directory
#      ansible.builtin.find:
#        paths: "{{ base_dir }}"
#        patterns: "*.tar"
#        file_type: file
#      register: tar_files
#
#    - name: Fail if no .tar files are found in the directory
#      fail:
#        msg: "No .tar files found in the specified directory: {{ base_dir }}."
#      when: tar_files.files | length == 0
#
#    - name: Check if the specified version is available locally
#      set_fact:
#        version_available: >-
#          {{
#            (tar_files.files | selectattr('path', 'search', version) | map(attribute='path') | list | length) > 0
#          }}
#
#    - name: Debug version availability
#      debug:
#        msg: "Version {{ version }} availability: {{ version_available }}"
#
#    - name: fail the play if version specified is not avaiable in control node
#      fail:
#        msg: Version specified is not available in specified directory
#      when: version_available == false
#
#- name: Determine action and run tasks on remote machines
#  hosts: group1
#  vars:
#    version_available: "{{ hostvars['localhost']['version_available'] }}"  # Pass variable from localhost
#  tasks:
#    - name: Query the installed version of TIVsm-BA
#      ansible.builtin.command: rpm -q TIVsm-BA
#      register: installed_version_check
#      ignore_errors: true
#
#    - name: Extract installed version
#      set_fact:
#        installed_version: >-
#          {{
#            installed_version_check.stdout.split('-')[2] + '.' +
#            installed_version_check.stdout.split('-')[3].split('.')[0]
#          }}
#      when: installed_version_check.rc == 0
#
#    - name: Parse user version and installed version into lists for comparison
#      set_fact:
#        user_version_list: "{{ version.split('.') | map('int') | list }}"
#        installed_version_list: "{{ installed_version.split('.') | map('int') | list }}"
#      when: installed_version is defined
#
#    - name: Determine action variable based on state and conditions
#      set_fact:
#        action: >-
#          {{
#            "upgrade" if
#            (installed_version is defined and user_version_list > installed_version_list and version_available)
#            else
#            "install" if
#            (installed_version is not defined and version_available)
#            else
#            ''
#          }}
#
#    - name: Fail if no action can be determined
#      fail:
#        msg: >-
#          Unable to determine action. Either:
#          - Specified version {{ version }} is not available locally.
#          - Installed version {{ installed_version | default('None') }} is greater or equal to the specified version.
#      when: action == ''
#
#    - name: Debug action
#      debug:
#        msg: "Determined action: {{ action }}"

#- name: Run install tasks
#  include_tasks: install.yml
#  when: action == "install"
#
#- name: Run upgrade tasks
#  include_tasks: ba_client_upgrade.yml
#  when: action == "upgrade"



#- name: Upgarde BA Client
#  hosts: group1
#  roles:
#    - role: ba_client_install
#      vars:
#        ba_client_state: "present"
#        ba_client_version: "8.1.24"
##        ba_client_base_dir: "/path/to/local/repo"

#- name: Collect system info
#  hosts: group1
#  roles:
#    - role: collect_system_info
#      vars:
#        ba_client_state: "present"
#        ba_client_version: "8.1.23"
#        ba_client_base_dir: "/path/to/local/repo"

---
- name: start the daemon
  hosts: group1
  tasks:
    # Enable dsmcad.service
    - name: Enable dsmcad.service
      ansible.builtin.systemd:
        name: dsmcad.service
        enabled: true

    # Check if dsmcad.service is enabled
    - name: Check if dsmcad.service is enabled
      ansible.builtin.command: "systemctl is-enabled dsmcad.service"
      register: dsmcad_status
      failed_when: false  # Prevent task from failing if the service is not enabled

    # Verify if the service is enabled and provide output
    - name: Check if dsmcad.service is successfully enabled
      debug:
        msg: "dsmcad started successfully."
      when: "'enabled' in dsmcad_status.stdout"

    # Output message if the service is not enabled
    - name: Check if dsmcad.service failed to enable
      debug:
        msg: "Failed to enable dsmcad.service. Please check the service configuration."
      when: "'disabled' in dsmcad_status.stdout"