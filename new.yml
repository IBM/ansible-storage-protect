- name: Check system compatibility
  hosts: all
  tasks:
    - name: Install ba client
      ba_client:
        install: false
      register: result

    - name: Check architecture compatibility
      set_fact:
        architecture_compatible: "{{ 'x86_64' in result.result.system_info.Architecture }}"

    - name: Check disk space compatibility
      set_fact:
        disk_space_compatible: "{{ result.result.system_info['Filesystem Disk Space'].avail | regex_replace('G', '') | float > 1.4 }}"

    - name: Check filesystem compatibility
      set_fact:
        filesystem_compatible: "{{ result.result.system_info['Filesystem Type'] in ['xfs', 'ext2', 'ext3'] }}"

    - name: Check Java installation
      set_fact:
        java_installed: "{{ 'Java' not in result.result.system_info['Java Version'] | lower }}"

    - name: Display compatibility results
      debug:
        msg: |
          Architecture check: {{ architecture_compatible }}
          Disk space check: {{ disk_space_compatible }}
          Filesystem check: {{ filesystem_compatible }}
          Java installed: {{ java_installed }}

    - name: Show if system is compatible
      debug:
        msg: "System is compatible"
      when: architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed

    - name: Show if system is not compatible
      debug:
        msg: "System is incompatible"
      when: not (architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed)

    - name: Create /opt/baClient directory
      ansible.builtin.file:
        path: /opt/baClient
        state: directory
        mode: '0755'
      when: architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed

    - name: Extract provided .tar file
      ansible.builtin.unarchive:
        src: /opt/8.1.24.0-TIV-TSMBAC-LinuxX86.tar
        dest: /opt/baClient
        remote_src: yes
      when: architecture_compatible and disk_space_compatible and filesystem_compatible and java_installed
      register: extraction_result

    - name: Find extracted files
      ansible.builtin.find:
        paths: /opt/baClient
        recurse: yes
      register: extracted_files

    - name: Display the list of extracted files
      debug:
        msg: "Extracted files: {{ extracted_files.files | map(attribute='path') | list }}"
      when: extracted_files is defined and extracted_files.files | length > 0
    - name: Check if TIVsm-API64 is installed
      command: rpm -q TIVsm-API64
      register: check_api64
      ignore_errors: true



    - name: Check if TIVsm-APIcit is installed
      command: rpm -q TIVsm-APIcit
      register: check_apicit
      ignore_errors: true



    - name: Check if BA package is installed or not
      command: rpm -q TIVsm-BA
      register: check_ba
      ignore_errors: true



    - name: Check if BAcit package is installed or not
      command: rpm -q TIVsm-BAcit
      register: check_bacit
      ignore_errors: true

    # Install GSKit first
    - name: Install GSKit crypt library (gskcrypt)
      ansible.builtin.command: rpm -ivh {{ item }}
      with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'gskcrypt') | list }}"
      when: extracted_files is defined and extracted_files.files | length > 0
      ignore_errors: true

    - name: Install GSKit SSL library (gskssl)
      ansible.builtin.command: rpm -ivh {{ item }}
      with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'gskssl') | list }}"
      when: extracted_files is defined and extracted_files.files | length > 0 and install
      ignore_errors: true

    - name: Install API packages (TIVsm-API64, TIVsm-APIcit)
      ansible.builtin.command: rpm -ivh {{ item }}
      with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-API') | list }}"
      when: check_apicit.rc != 0 and install

    - name: Install BA packages (TIVsm-BA, TIVsm-BAcit)
      ansible.builtin.command: rpm -ivh {{ item }}
      with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-BA') | list }}"
      when: check_ba.rc != 0 and install









