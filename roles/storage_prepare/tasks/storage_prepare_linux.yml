---
- name: Validate 'size' parameter
  assert:
    that:
      - storage_prepare_size in allowed_sizes
    fail_msg: Invalid size '{{ storage_prepare_size }}' â€“ choose from {{ allowed_sizes }}.
    success_msg: "'size' '{{ storage_prepare_size }}' is valid."

- name: Get all block devices (JSON)
  command: lsblk -b -J -o NAME,SIZE,MOUNTPOINT,TYPE
  register: lsblk_raw
  changed_when: false

- name: Debug lsblk raw output
  debug:
    var: lsblk_raw.stdout

- name: Parse lsblk JSON
  set_fact:
    devices_info: "{{ lsblk_raw.stdout | from_json }}"

- name: Build list of free (unused) disks
  set_fact:
    free_disks: |-
      {{
        devices_info.blockdevices
        | selectattr('type','equalto','disk')
        | selectattr('mountpoint','equalto',None)
        | map(attribute='name')
        | list
      }}

- name: Debug free disks
  debug:
    var: free_disks

- name: Allocate disks to each group based on the low-high size range (no duplicates)
  set_fact:
    disk_allocations: "{{ disk_allocations | default({}) | combine({ item.key:
      selected_disks }) }}"
    used_disks: "{{ used_disks | default([]) + selected_disks }}"
  vars:
    thresholds: "{{ dsk_size[storage_prepare_size] }}"
    system_disks: |-
      {{
        devices_info.blockdevices
        | selectattr('children', 'defined')
        | map(attribute='name') | list
      }}
    available_disks: |-
      {{
        devices_info.blockdevices
        | selectattr('type','equalto','disk')
        | selectattr('mountpoint','equalto',None)
        | rejectattr('name', 'in', used_disks | default([]))
        | rejectattr('name', 'in', system_disks)
        | selectattr('size', 'ge', (item.value[0] * 1024 * 1024 * 1024))
        | selectattr('size', 'le', (item.value[1] * 1024 * 1024 * 1024))
        | list
      }}
    selected_disks: "{{ available_disks | map(attribute='name') | list }}"
  loop: "{{ dsk_size[storage_prepare_size] | dict2items }}"

- name: Show final disk allocations
  debug:
    var: disk_allocations

- name: Ensure every group has at least one disk
  assert:
    that:
      - (disk_allocations[item.key] | length) > 0
    fail_msg: Group '{{ item.key }}' has NO disks for size='{{ storage_prepare_size }}'!
    success_msg: Group '{{ item.key }}' has {{ disk_allocations[item.key] | length
      }} disk(s).
  loop: "{{ dsk_size[storage_prepare_size] | dict2items }}"

- name: All checks passed
  debug:
    msg: "Success: all groups have at least one disk for size='{{ storage_prepare_size }}'."

- name: Initialize empty dir_to_disk dictionary
  set_fact:
    dir_to_disk: {}

- name: Build dir_to_disk mapping (excluding TSMalog and TSMarchlog)
  set_fact:
    dir_to_disk: "{{ dir_to_disk | combine({ (item.0.key ~ '%02d' % (item.1 + 1)):
      item.0.value[item.1] }) }}"
  with_nested:
    - "{{ disk_allocations | dict2items }}"
    - "{{ range(0, 10) | list }}"
  when:
    - item.1 < (item.0.value | length)
    - item.0.key not in ['TSMalog', 'TSMarchlog']

- name: Create directories
  file:
    path: /{{ instance_dir }}/{{ item.key }}
    state: directory
  loop: "{{ dir_to_disk | dict2items }}"

- name: Show the final dir -> disk mapping
  debug:
    var: dir_to_disk

#- name: Group directory names by prefix and join with commas
#  set_fact:
#    tsmstgpaths: "{{ dir_to_disk.keys() | select('match', '^TSMfile') | map('trim')
#      | list | join(',') }}"
#    tsmbkpaths: "{{ dir_to_disk.keys() | select('match', '^TSMbkup') | map('trim') |
#      list | join(',') }}"
#    tsmdbpaths: "{{ dir_to_disk.keys() | select('match', '^TSMdbspace') |
#      map('trim') | list | join(',') }}"

- name: Group directory names by prefix and join with commas (with full path)
  set_fact:
    tsmstgpaths: >-
      {{ dir_to_disk.keys()
         | select('match', '^TSMfile')
         | map('regex_replace', '^', instance_dir ~ '/')
         | list
         | join(',')
      }}
    tsmbkpaths: >-
      {{ dir_to_disk.keys()
         | select('match', '^TSMbkup')
         | map('regex_replace', '^', instance_dir ~ '/')
         | list
         | join(',')
      }}
    tsmdbpaths: >-
      {{ dir_to_disk.keys()
         | select('match', '^TSMdbspace')
         | map('regex_replace', '^', instance_dir ~ '/')
         | list
         | join(',')
      }}

- name: Debug paths
  debug:
    msg: "Storage pool dir:- {{ tsmstgpaths  }}"

- name: Debug paths
  debug:
    msg: "BK dir:- {{ tsmbkpaths  }}"

- name: Debug paths
  debug:
    msg: "DB dir:- {{ tsmdbpaths  }}"

- name: Wipe filesystem
  command: "wipefs -a /dev/{{ item.value }}"
  loop: "{{ dir_to_disk | dict2items }}"

- name: Format disks with xfs
  filesystem:
    fstype: xfs
    dev: /dev/{{ item.value }}
  loop: "{{ dir_to_disk | dict2items }}"
  become: true

- name: Mount disks to corresponding directories
  mount:
    path: "{{ instance_dir }}/{{ item.key }}"
    src: /dev/{{ item.value }}
    fstype: xfs
    state: mounted
  loop: "{{ dir_to_disk | dict2items }}"
  become: true

# === Initially Wipe disks used by active and archive log groups ===

- name: Wipe filesystem on active log disks
  command: "wipefs -a /dev/{{ item }}"
  loop: "{{ disk_allocations['TSMalog'] }}"
  ignore_errors: true

- name: Wipe filesystem signatures on archive log disks
  command: "wipefs -a /dev/{{ item }}"
  loop: "{{ disk_allocations['TSMarchlog'] }}"
  ignore_errors: true

- name: Create directory for active log
  file:
    path: "/{{ instance_dir }}/TSMalog"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Create volume group for active log
  lvg:
    vg: vg_actlog
    pvs: "{{ disk_allocations['TSMalog'] | map('regex_replace', '^(.*)$',
      '/dev/\\1') | list }}"

- name: Create logical volume for active log
  lvol:
    vg: vg_actlog
    lv: lv_actlog
    size: 100%FREE

- name: Format the logical volume for active log
  filesystem:
    fstype: xfs
    dev: /dev/vg_actlog/lv_actlog

- name: Mount the logical volume to {{ instance_dir }}/actlog
  mount:
    path: "{{ instance_dir }}/TSMalog"
    src: /dev/vg_actlog/lv_actlog
    fstype: xfs
    state: mounted
    opts: defaults

#- name: Add active log mount to /etc/fstab
#  lineinfile:
#    path: /etc/fstab
#    line: "/dev/vg_actlog/lv_actlog  {{ instance_dir }}/TSMalog  xfs  defaults  0 0"
#    create: yes
#    state: present
#    insertafter: EOF
#  become: true

- name: Create directory for archive log
  file:
    path: "/{{ instance_dir }}/TSMarchlog"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Create volume group for archive log
  lvg:
    vg: vg_archlog
    pvs: "{{ disk_allocations['TSMarchlog'] | map('regex_replace', '^(.*)$',
      '/dev/\\1') | list }}"

- name: Create logical volume for archive log
  lvol:
    vg: vg_archlog
    lv: lv_archlog
    size: 100%FREE

- name: Format the logical volume for archive log
  filesystem:
    fstype: xfs
    dev: /dev/vg_archlog/lv_archlog

- name: Mount the logical volume to {{ instance_dir }}/archlog
  mount:
    path: "{{ instance_dir }}/TSMarchlog"
    src: /dev/vg_archlog/lv_archlog
    fstype: xfs
    state: mounted
    opts: defaults

#- name: Add archive log mount to /etc/fstab
#  lineinfile:
#    path: /etc/fstab
#    line: "/dev/vg_archlog/lv_archlog  {{ instance_dir }}/TSMarchlog  xfs  defaults  0 0"
#    create: yes
#    state: present
#    insertafter: EOF
#  become: true
...
