---
# -----------------------
# Linux Block
# -----------------------
- block:
    - name: Check if dsm.opt file exists (Linux)
      ansible.builtin.stat:
        path: "{{ dsm_opt_optfile_path }}"
      register: dsm_opt_status

    - name: Debug the value of dsm_opt_status
      debug:
        var: dsm_opt_status

    - name: Remove dsm.opt file (Linux)
      ansible.builtin.file:
        path: "{{ dsm_opt_optfile_path }}"
        state: absent
      when:
        - dsm_opt_status.stat.exists
        - dsm_opt_state == 'absent'

    - name: Check if dsm.opt file still exists after removal (Linux)
      ansible.builtin.stat:
        path: "{{ dsm_opt_optfile_path }}"
      register: post_removal_status
      when: dsm_opt_state == 'absent'

    - name: Debug the status of dsm.opt file removal (Linux)
      ansible.builtin.debug:
        msg: "dsm.opt file removed successfully"
      when:
        - dsm_opt_state == 'absent'
        - not post_removal_status.stat.exists

    - name: Stop execution of playbook when file is removed (Linux)
      ansible.builtin.meta: end_play
      when:
        - dsm_opt_state == 'absent'
        - not post_removal_status.stat.exists

    - name: Convert dsm.opt file content into a dictionary (Linux)
      ansible.builtin.shell: |
        python3 <<EOF
        import os, json
        file_path = "{{ dsm_opt_optfile_path }}"
        dsm_dict = {}
        if os.path.exists(file_path):
            with open(file_path, 'r') as f:
                lines = f.readlines()
            for line in lines:
                line = line.strip()
                if line and ' ' in line:
                    key, value = line.split(' ', 1)
                    dsm_dict[key] = value
        with open('/tmp/dsm_opt_dict.json', 'w') as output_file:
            json.dump(dsm_dict, output_file)
        EOF
      when: dsm_opt_status.stat.exists
      changed_when: false

    - name: Read the existing dictionary from JSON (Linux)
      ansible.builtin.slurp:
        src: /tmp/dsm_opt_dict.json
      register: existing_dict_raw
      when: dsm_opt_status.stat.exists

    - name: Convert the raw dictionary into usable data (Linux)
      ansible.builtin.set_fact:
        existing_dsm_dict: "{{ existing_dict_raw.content | b64decode | from_json }}"
      when: dsm_opt_status.stat.exists

    - name: Initialize empty dictionary if dsm.opt does not exist (Linux)
      ansible.builtin.set_fact:
        existing_dsm_dict: {}
      when: not dsm_opt_status.stat.exists

    - name: Initialize transformed parameters dictionary (Linux)
      ansible.builtin.set_fact:
        transformed_dsm_parameters: {}

    - name: Transform snake_case keys to uppercase iteratively (Linux)
      ansible.builtin.set_fact:
        transformed_dsm_parameters: >-
          {{
            transformed_dsm_parameters | combine({
              (item.key.split('_', 2)[-1] | upper): item.value
            })
          }}
      with_dict: "{{ dsm_opt_parameters }}"

    - name: Merge transformed parameters with existing content (Linux)
      ansible.builtin.set_fact:
        merged_dsm_dict: >-
          {{
            existing_dsm_dict | default({}) | combine(transformed_dsm_parameters, recursive=true)
          }}

    - name: Write the updated dsm.opt file (Linux)
      ansible.builtin.template:
        src: dsm.opt.j2
        dest: "{{ dsm_opt_optfile_path }}"
        mode: '0644'

    - name: Debug | Show final dsm.opt content (Linux)
      ansible.builtin.shell: cat "{{ dsm_opt_optfile_path }}"
      register: dsm_opt_content
      changed_when: false
      failed_when: false

    - name: Debug | Print dsm.opt file content (Linux)
      ansible.builtin.debug:
        var: dsm_opt_content.stdout_lines

  when: ansible_os_family != "Windows"

# -----------------------
# Windows Block
# -----------------------
- block:
    
    - name: Check if dsm.opt file exists (Windows)
      win_stat:
        path: "{{ dsm_opt_optfile_path_windows }}"
      register: dsm_opt_status

    - name: Remove dsm.opt file (Windows)
      win_file:
        path: "{{ dsm_opt_optfile_path_windows }}"
        state: absent
      when: dsm_opt_status.stat.exists and dsm_opt_state == 'absent'

    - name: Check if dsm.opt file still exists after removal (Windows)
      win_stat:
        path: "{{ dsm_opt_optfile_path_windows }}"
      register: post_removal_status
      when: dsm_opt_state == 'absent'

    - name: Debug the status of dsm.opt file removal (Windows)
      debug:
        msg: "dsm.opt file removed successfully"
      when:
        - dsm_opt_state == 'absent'
        - not post_removal_status.stat.exists

    - name: Stop execution of playbook when file is removed (Windows)
      meta: end_play
      when:
        - dsm_opt_state == 'absent'
        - not post_removal_status.stat.exists

    - name: Ensure Temp directory exists (Windows)
      ansible.windows.win_file:
        path: C:\Temp
        state: directory


    - name: Convert dsm.opt file content into a dictionary (Windows)
      win_shell: |
        $filePath = "{{ dsm_opt_optfile_path_windows }}"
        $outputPath = "C:\Temp\dsm_opt_dict.json"
        $dict = @{}

        if (Test-Path $filePath) {
            Get-Content $filePath | ForEach-Object {
                if ($_ -match '^\s*(\S+)\s+(.+)$') {
                    $dict[$matches[1]] = $matches[2]
                }
            }
            $json = $dict | ConvertTo-Json
            $json | Out-File -FilePath $outputPath -Encoding UTF8
        }
      when: dsm_opt_status.stat.exists
      changed_when: false

    - name: Read JSON content from dsm.opt dictionary file (Windows)
      win_shell: |
        $jsonPath = "C:\Temp\dsm_opt_dict.json"
        if (Test-Path $jsonPath) {
            Get-Content $jsonPath -Raw
        }
      register: existing_dict_raw
      when: dsm_opt_status.stat.exists
      changed_when: false

    - name: Convert the raw JSON string to a dictionary (Windows)
      set_fact:
        existing_dsm_dict: "{{ existing_dict_raw.stdout | from_json }}"
      when: dsm_opt_status.stat.exists

    - name: Initialize empty dictionary if dsm.opt does not exist (Windows)
      set_fact:
        existing_dsm_dict: {}
      when: not dsm_opt_status.stat.exists

    - name: Initialize transformed parameters dictionary (Windows)
      set_fact:
        transformed_dsm_parameters: {}

    - name: Transform snake_case keys to uppercase iteratively (Windows)
      set_fact:
        transformed_dsm_parameters: >-
          {{
            transformed_dsm_parameters | combine({
              (item.key.split('_', 2)[-1] | upper): item.value
            })
          }}
      with_dict: "{{ dsm_opt_parameters }}"

    - name: Merge transformed parameters with existing content (Windows)
      set_fact:
        merged_dsm_dict: >-
          {{
            existing_dsm_dict | default({}) | combine(transformed_dsm_parameters, recursive=true)
          }}

    - name: Write the updated dsm.opt file (Windows)
      win_template:
        src: dsm.opt.j2
        dest: "{{ dsm_opt_optfile_path_windows }}"

    - name: Debug | Show final dsm.opt content (Windows)
      ansible.windows.win_shell: type "{{ dsm_opt_optfile_path_windows }}"
      register: win_dsm_opt_content
      changed_when: false
      failed_when: false

    - name: Debug | Print dsm.opt file content (Windows)
      ansible.builtin.debug:
        var: win_dsm_opt_content.stdout_lines

  when: ansible_os_family == "Windows"

# -----------------------
# Common Debug
# -----------------------
- name: Debug | Print success message
  ansible.builtin.debug:
    msg: "âœ… DSM Opt playbook executed successfully on {{ inventory_hostname }}"
