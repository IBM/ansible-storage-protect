---

# ---------------- Linux Block ----------------
- block:
    
    # Check if BA Client is already installed
    - name: Check if BA Client is already installed (Linux)
      ansible.builtin.command: rpm -q TIVsm-BA
      register: ba_client_check
      ignore_errors: true
      changed_when: false

    # Displaying the installation status ( if ba client is installed and still users passes the ba_client_action as install, playbook will terminate )
    - name: Display BA Client status (Linux)
      ansible.builtin.debug:
        msg: "BA Client is already installed. Skipping installation. Installed Version -> {{ ba_client_check.stdout }}"
      when: ba_client_check.rc == 0 and ba_client_action == "install"

    # Skipping the installation if BA Client is already installed
    - name: Fail or Skip Installation (Linux)
      ansible.builtin.meta: end_play
      when: ba_client_check.rc == 0 and ba_client_action == "install"

    # ================= Pre-checks ==========================

    # System Compatibility checks for installing the ba client ( Pre-checks )
    - name: Checking architecture compatibility
      ansible.builtin.set_fact:
        architecture_compatible: "{{ (system_info.Architecture | first) in sp_server_compatible_architectures }}"

    #- name: Checking Java installation
    #  ansible.builtin.set_fact:
    #    java_installed: "{{ system_info['Java Version'] | lower is search('jdk|version') }}"

    - name: Checking available disk space
      ansible.builtin.set_fact:
        avail_disk_space: "{{ disk_space.available_mb | int > 1500 }}"

    - name: Compatibility results
      ansible.builtin.debug:
        msg: |
          Architecture check: {{ architecture_compatible }}
          Disk Space: {{ avail_disk_space }}

    - name: Compatibility check result
      ansible.builtin.debug:
        msg: "System is compatible"
      when: architecture_compatible and avail_disk_space

    - name: Compatibility check result
      ansible.builtin.debug:
        msg: "System is incompatible"
      when: not (architecture_compatible and avail_disk_space)

    - name: Fail if system is incompatible
      ansible.builtin.fail:
        msg: >
          System compatibility checks failed. Please ensure the following
          requirements are met: - Compatible architecture: x86_64 - Java installed -
          Sufficient disk space: > 1400 MB Architecture check: {{
          architecture_compatible }} Disk
          Space: {{ avail_disk_space }}
      when: not (architecture_compatible and avail_disk_space)

    - name: Install rsync on RHEL
      ansible.builtin.dnf:
        name: rsync
        state: present

    - name: Install lsof on remote VMs
      ansible.builtin.dnf:
        name: lsof
        state: present

    # ====================== Transferring packages on remote vm's ======================

    - name: Debug | Show tar file path
      debug:
        msg: "Tar file path is {{ tar_file_path }}"


    # transfer files to the remote machines
    - name: Transferring the packages on the remote host
      ansible.posix.synchronize:
        src: "{{ tar_file_path }}"
        dest: "{{ ba_client_temp_dest }}"
      when: architecture_compatible and avail_disk_space
      register: copy_result

    # Validate file transfer and show error details
    - name: Validating file transfer
      ansible.builtin.fail:
        msg: >
          Package transfer to the remote host failed.
          Error details: {{ copy_result.stderr | default('No error details available.') }}
      when: copy_result is not defined or copy_result.rc != 0

    # ======= Extracting and finding the packages on remote vm's =======

    # creating a temporary directory to extract the .rpm files
    - name: Remove existing /opt/baClient directory
      ansible.builtin.file:
        path: "{{ ba_client_extract_dest }}"
        state: absent

    - name: Creating /opt/baClient directory
      ansible.builtin.file:
        path: "{{ ba_client_extract_dest }}"
        state: directory
        mode: '0755'
      when: architecture_compatible and avail_disk_space

    - name: Extracting the .tar file
      ansible.builtin.unarchive:
        src: "{{ ba_client_temp_dest }}{{ tar_file_path | basename }}"
        dest: "{{ ba_client_extract_dest }}"
        remote_src: true
      when: architecture_compatible and avail_disk_space
      register: extraction_result

    - name: Finding extracted files
      ansible.builtin.find:
        paths: /opt/baClient
        recurse: true
      register: extracted_files

    - name: List of extracted files
      ansible.builtin.debug:
        msg: "Extracted files: {{ extracted_files.files | map(attribute='path') | list }}"
      when: extracted_files is defined and extracted_files.files | length > 0

    # ===== Checking whether the packages are already installed or not to maintain the idempotency ====

    # Checking if GSKit cryptographic library (gskcrypt) is installed
    - name: Checking if GSKit cryptographic library (gskcrypt) is installed
      ansible.builtin.command: rpm -q gskcrypt64
      register: check_gskcrypt
      ignore_errors: true
      changed_when: false

    # Checking if GSKit SSL library (gskssl) is installed
    - name: Checking if GSKit SSL library (gskssl) is installed
      ansible.builtin.command: rpm -q gskssl64
      register: check_gskssl
      ignore_errors: true
      changed_when: false

    - name: Checking if TIVsm-API64 is installed
      ansible.builtin.command: rpm -q TIVsm-API64
      register: check_api64
      ignore_errors: true
      changed_when: false

    - name: Checking if TIVsm-APIcit is installed
      ansible.builtin.command: rpm -q TIVsm-APIcit
      register: check_apicit
      ignore_errors: true
      changed_when: false

    - name: Checking if BA package is installed or not
      ansible.builtin.command: rpm -q TIVsm-BA
      register: check_ba
      ignore_errors: true
      changed_when: false

    - name: Checking if BAcit package is installed or not
      ansible.builtin.command: rpm -q TIVsm-BAcit
      register: check_bacit
      ignore_errors: true
      changed_when: false

    - name: Checking if BAhdw package is installed or not
      ansible.builtin.command: rpm -q TIVsm-BAhdw
      register: check_bahdw
      ignore_errors: true
      changed_when: false

    - name: Checking if WEBGUI package is installed or not
      ansible.builtin.command: rpm -q TIVsm-WEBGUI
      register: check_webgui
      ignore_errors: true
      changed_when: false

    # ===== Installing packages in sequence =====

    - name: Installing packages
      block:
        # Installing GSKit crypt library (gskcrypt)
        - name: Install GSKit crypt library (gskcrypt)
          ansible.builtin.command: rpm -ivh {{ item }}
          with_items: >
            {{ extracted_files.files | map(attribute='path')
                  | select('search', 'gskcrypt.*\.rpm$')
                  | reject('search', '_pd\.rpm$')
                  | list }}
          when: extracted_files is defined and extracted_files.files | length > 0 and check_gskcrypt.rc != 0
          register: gskcrypt_install_result
          ignore_errors: true
          changed_when: gskcrypt_install_result.rc == 0

        # Installing GSKit SSL library (gskssl)
        - name: Install GSKit SSL library (gskssl)
          ansible.builtin.command: "rpm -ivh {{ item }}"
          with_items: >
            {{ extracted_files.files | map(attribute='path')
                  | select('search', 'gskssl.*\.rpm$')
                  | reject('search', '_pd\.rpm$')
                  | list }}
          when: extracted_files is defined and extracted_files.files | length > 0 and check_gskssl.rc != 0
          register: gskssl_install_result
          ignore_errors: true
          changed_when: gskssl_install_result.rc == 0

        - name: Ensure libxcrypt-compat is installed (for libcrypt.so.1)
          ansible.builtin.package:
            name: libxcrypt-compat
            state: present

        # Installing API packages (TIVsm-API64, TIVsm-APIcit)
        - name: Install API64 package
          ansible.builtin.command: "rpm -ivh {{ item }}"
          with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-API64\\.') | list }}"
          when: check_api64.rc != 0
          register: api64_install_result
          ignore_errors: false
          changed_when: api64_install_result.rc == 0

        - name: Install APIcit package
          ansible.builtin.command: "rpm -ivh {{ item }}"
          with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-APIcit\\.') | list }}"
          when: check_apicit.rc != 0
          register: apicit_install_result
          ignore_errors: false
          changed_when: apicit_install_result.rc == 0

        # Installing BA packages (TIVsm-BA, TIVsm-BAcit)
        - name: Install BA package
          ansible.builtin.command: "rpm -ivh  {{ item }}"
          with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-BA\\.') | list }}"
          when: check_ba.rc != 0
          register: ba_install_result
          ignore_errors: false
          changed_when: ba_install_result.rc == 0

        - name: Install BAcit package
          ansible.builtin.command: "rpm -ivh  {{ item }}"
          with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-BAcit\\.') | list }}"
          when: check_bacit.rc != 0
          register: bacit_install_result
          ignore_errors: false
          changed_when: bacit_install_result.rc == 0

        - name: Install BAhdw package
          ansible.builtin.command: "rpm -ivh  {{ item }}"
          with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-BAhdw\\.') | list }}"
          when: check_bahdw.rc != 0
          register: bahdw_install_result
          ignore_errors: false
          changed_when: bahdw_install_result.rc == 0

        - name: Install WebGUI package
          ansible.builtin.command: "rpm -ivh  {{ item }}"
          with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-WEBGUI') | list }}"
          when: check_webgui.rc != 0
          register: webgui_install_result
          ignore_errors: false
          changed_when: webgui_install_result.rc == 0

    #    ==== if any error occurs while installing the packages =====
    #  ===  like if package is corrupted , then role will uninstall all the packages which were installed in previous step ===
    #  ===  to maintain the state of the system ===
      rescue:
        - name: Define package uninstall order
          ansible.builtin.set_fact:
            uninstall_packages:
              - "TIVsm-WEBGUI"
              - "TIVsm-BAhdw"
              - "TIVsm-BAcit"
              - "TIVsm-APIcit"
              - "TIVsm-BA"
              - "TIVsm-API64"
              - "gskssl64"
              - "gskcrypt64"

        - name: Debug all registered variables
          ansible.builtin.debug:
            msg: |
              gskcrypt_install_result: {{ gskcrypt_install_result | default('undefined') }}
              gskssl_install_result: {{ gskssl_install_result | default('undefined') }}
              api64_install_result: {{ api64_install_result | default('undefined') }}
              apicit_install_result: {{ apicit_install_result | default('undefined') }}
              ba_install_result: {{ ba_install_result | default('undefined') }}
              bacit_install_result: {{ bacit_install_result | default('undefined') }}
              bahdw_install_result: {{ bahdw_install_result | default('undefined') }}
              webgui_install_result: {{ webgui_install_result | default('undefined') }}

    #    - name: Identify reason for failure
    #      ansible.builtin.set_fact:
    #        failure_reason: >-
    #          {{
    #            (
    #              [
    #                gskcrypt_install_result,
    #                gskssl_install_result,
    #                api_install_result,
    #                ba_install_result
    #              ]
    #              | select('defined')
    #              | map('extract', 'results')
    #              | select('defined')
    #              | map('selectattr', 'rc', 'ne', 0)
    #              | map('map', attribute='stderr')
    #              | sum([], [])
    #              +
    #              [
    #                gskcrypt_install_result,
    #                gskssl_install_result,
    #                api_install_result,
    #                ba_install_result
    #              ]
    #              | select('defined')
    #              | selectattr('results', 'undefined')
    #              | selectattr('failed', 'equalto', true)
    #              | map(attribute='msg')
    #            )
    #            | select('truthy')
    #            | join('\n')
    #          }}

        - name: Uninstall all packages to restore original state
          ansible.builtin.command: "rpm -e {{ item }}"
          with_items: "{{ uninstall_packages }}"
          ignore_errors: true
    #      failed_when: false
          changed_when: true

        - name: Installation status summary
          ansible.builtin.set_fact:
            is_installation_successful: false

        - name: Fail the installation process
          ansible.builtin.fail:
            msg: >
              Installation failed. All packages have been uninstalled to restore system state.
              Debug information:
              gskcrypt_install_result: {{ gskcrypt_install_result | default('undefined') }}
              gskssl_install_result: {{ gskssl_install_result | default('undefined') }}
              api64_install_result: {{ api64_install_result | default('undefined') }}
              apicit_install_result: {{ apicit_install_result | default('undefined') }}
              ba_install_result: {{ ba_install_result | default('undefined') }}
              bacit_install_result: {{ bacit_install_result | default('undefined') }}
              bahdw_install_result: {{ bahdw_install_result | default('undefined') }}

          when: ba_client_action == "install"

    # ============ Post-checks to verify the installation of ba client ==========
    - name: Verify BA Client installation
      ansible.builtin.command: rpm -q TIVsm-BA
      register: installation_check
      ignore_errors: true
      changed_when: installation_check.rc == 0

    - name: Display BA Client installation status
      ansible.builtin.debug:
        msg: |
          BA Client {{ ba_client_version }} installation status: {{ "Installed Successfully" if installation_check.rc == 0 else "Not Installed" }}

    - name: Mark install.yml as failed if verification fails
      ansible.builtin.fail:
        msg: "BA Client installation verification failed. Please check logs."
      when: installation_check.rc != 0 and ba_client_action == "install"

    # ============ 'is_installation_successful' fact is used in ba_client_upgrade_linux.yml =======

    - name: Installation status summary
      ansible.builtin.set_fact:
        is_installation_successful: "{{ installation_check.rc == 0 }}"

    # =============== start the daemon =============

    # Enable dsmcad.service
    - name: Enable dsmcad.service
      ansible.builtin.systemd:
        name: dsmcad.service
        enabled: true
      when: ba_client_start_daemon

    # Check if dsmcad.service is enabled
    - name: Check if dsmcad.service is enabled
      ansible.builtin.command: "systemctl is-enabled dsmcad.service"
      register: dsmcad_status
      failed_when: false  # Prevent task from failing if the service is not enabled
      when: ba_client_start_daemon
      changed_when: false

    # Verify if the service is enabled and provide output
    - name: Check if dsmcad.service is successfully enabled
      ansible.builtin.debug:
        msg: "dsmcad started successfully."
      when: ba_client_start_daemon and dsmcad_status.stdout == "enabled"

    # Output message if the service is not enabled
    - name: Check if dsmcad.service failed to enable
      ansible.builtin.debug:
        msg: "Failed to enable dsmcad.service."
      when: ba_client_start_daemon and dsmcad_status.stdout != "enabled"

  when: ansible_os_family == "RedHat"


# ---------------- Windows Block ----------------

- block:
    
    # ================= Check if BA Client is already installed ==================
    - name: Check if BA Client is already installed (Windows)
      ansible.windows.win_reg_stat:
        path: HKLM:\SOFTWARE\IBM\ADSM\CurrentVersion
        name: PTF
      register: ba_client_check
      ignore_errors: true

    - name: Display BA Client status (Windows)
      ansible.builtin.debug:
        msg: "BA Client is already installed. Installed Version -> {{ ba_client_check.value }}"
      when: ba_client_check.exists and ba_client_action == "install"

    - name: Fail or Skip Installation (Windows)
      ansible.builtin.meta: end_play
      when: ba_client_check.exists and ba_client_action == "install"

    # ================= Pre-checks ==========================

    - name: Check available disk space on C:\
      community.windows.win_disk_facts:
      register: disk_facts

    - name: Set fact for disk space availability
      ansible.builtin.set_fact:
        avail_disk_space: "{{ (system_info['Disk Info']['Free'] | int) > 1500000000 }}"

    - name: Compatibility results
      ansible.builtin.debug:
        msg: |
          Disk Space: {{ avail_disk_space }}

    - name: Fail if system is incompatible
      ansible.builtin.fail:
        msg: >
          System compatibility checks failed. Please ensure:
          - Sufficient disk space: > 1500 MB available on C:\
      when: not avail_disk_space

    # ====================== Transferring package ======================

    - name: Ensure C:\Temp exists
      ansible.windows.win_file:
        path: C:\Temp
        state: directory

    - name: Check if BA Client installer already exists
      ansible.windows.win_stat:
        path: "C:\\Temp\\{{ ba_client_version }-TIV-TSMBAC-WinX64.exe"
        get_size: yes
      register: installer_check

    - name: Download BA Client installer if not present
      ansible.windows.win_get_url:
        url: "https://public.dhe.ibm.com/storage/tivoli-storage-management/maintenance/client/v8r1/Windows/x64/v8126/{{ ba_client_version }}-TIV-TSMBAC-WinX64.exe"
        dest: "C:\\Temp\\{{ ba_client_installer_path | basename }}"
      when: not installer_check.stat.exists
      register: download_result

    - name: Debug installer status
      ansible.builtin.debug:
        msg: >-
          {% if installer_check.stat.exists %}
            BA Client installer already exists. Skipping download.
          {% else %}
            BA Client installer downloaded successfully. Size: {{ download_result.dest | default('Unknown') }}
          {% endif %}

    - name: Extract BA Client installer
      ansible.windows.win_command: >
        C:\Temp\{{ ba_client_installer_path | basename }} -y -oC:\Temp\ba_client_extracted
      args:
        creates: C:\Temp\ba_client_extracted
      register: extract_result

    - name: Find extracted MSI
      ansible.windows.win_find:
        paths: C:\Temp\ba_client_extracted
        recurse: yes
        patterns: '*.msi'
      register: msi_files

    - name: Debug extracted files
      ansible.builtin.debug:
        var: msi_files

    # ====================== Installing BA Client ======================

    - name: Install BA Client from MSI silently
      ansible.windows.win_package:
        path: "{{ msi_files.files[0].path }}"
        arguments: /qn ACCEPTLICENSE=YES
        state: present
      when: msi_files.matched > 0
      register: install_result

    - name: Fail if installation failed
      ansible.builtin.fail:
        msg: "BA Client installation failed. Debug: {{ install_result }}"
      when: install_result.rc is defined and install_result.rc != 0

    # ====================== Post-checks ======================

    - name: Verify BA Client installation via Win32_Product
      ansible.windows.win_shell: |
        $client = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*IBM Storage Protect Client*" }
        if ($client) { $client.Version } else { Write-Output "Not Installed" }
      register: installation_check

    - name: Display BA Client installation status
      ansible.builtin.debug:
        msg: |
          BA Client {{ ba_client_version }} installation status:
          {{ "Installed Successfully" if installation_check.stdout else "Not Installed" }}

    - name: Fail if verification fails
      ansible.builtin.fail:
        msg: "BA Client installation verification failed."
      when: not installation_check.stdout

    - name: Installation status summary
      ansible.builtin.set_fact:
        is_installation_successful: "{{ installation_check.stdout }}"

    # ====================== Start BA Client Service ======================

    - name: Ensure dsmcad service is started and enabled
      ansible.windows.win_service:
        name: dsmcad
        start_mode: auto
        state: started
      when: ba_client_start_daemon

    - name: Confirm dsmcad service status
      ansible.windows.win_service_info:
        name: dsmcad
      register: dsmcad_status
      when: ba_client_start_daemon

    - name: Debug dsmcad service status
      ansible.builtin.debug:
        msg: "dsmcad service is {{ 'running' if dsmcad_status.services[0].state == 'running' else 'not running' }}"
      when: ba_client_start_daemon

  when: ansible_os_family == "Windows"
