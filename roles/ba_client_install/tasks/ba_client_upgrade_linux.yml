---
# ======================== Pre-checks before upgrading the ba_client ==========

- name: Check if BA Client is installed before upgrade
  ansible.builtin.command: rpm -q TIVsm-BA
  register: ba_client_check
  ignore_errors: true
  changed_when: false

# Display a message if BA Client is not installed
- name: Display message if BA Client is not installed
  ansible.builtin.debug:
    msg: "BA Client is not installed on the system. Skipping upgrade process."
  when: ba_client_check.rc != 0

# Fail or Skip the Upgrade Play
- name: Skip upgrade if BA Client is not installed
  ansible.builtin.meta: end_play
  when: ba_client_check.rc != 0

# ============= Uninstalling the ba_client before performing upgrade ===========

- name: Uinstall the BA client before upgrade
  ansible.builtin.include_tasks: ba_client_uninstall_linux.yml

# ============= Installing the new version of ba_client ===========

- name: Upgrading the BA client
  ansible.builtin.include_tasks: ba_client_install_linux.yml

- name: Debug the install result
  ansible.builtin.debug:
    var: is_installation_successful

# === During upgrade, if any error occurs while installing the new version ===
# ===  to maintain the state of system we re-install the previous ba_client version and restore the old configuration files ===
# === if upgrade is unsuccessful ===
- name: Rollback on upgrade failure
  when: not is_installation_successful
  block:
    - name: Check if backup files exist
      ansible.builtin.stat:
        path: "{{ item }}.bk"
      with_items:
        - "/opt/tivoli/tsm/client/ba/bin/dsm.opt"
        - "/opt/tivoli/tsm/client/ba/bin/dsm.sys"
      register: backup_files_status

    - name: Restore original configuration files if backup exists
      ansible.builtin.copy:
        src: "{{ item.item }}.bk"
        dest: "{{ item.item }}"
        remote_src: true
        mode: '0644'
      with_items: "{{ backup_files_status.results }}"
      when: item.stat.exists

#      before starting the upgrade, previous packages are backed up in /opt/baClientPackagesBk
#      this packages will be used to reinstall the previous version
    - name: Finding extracted files
      ansible.builtin.find:
        paths: /opt/baClientPackagesBk
        recurse: true
      register: extracted_files

    - name: Install GSKit crypt library (gskcrypt)
      ansible.builtin.command: rpm -ivh {{ item }}
      with_items: >
        {{ extracted_files.files | map(attribute='path')
                      | select('search', 'gskcrypt.*\.rpm$')
                      | reject('search', '_pd\.rpm$')
                      | list }}
      register: gskcrypt_install_result
      ignore_errors: true
      changed_when: gskcrypt_install_result.rc == 0

    # Installing GSKit SSL library (gskssl)
    - name: Install GSKit SSL library (gskssl)
      ansible.builtin.command: "rpm -ivh {{ item }}"
      with_items: >
        {{ extracted_files.files | map(attribute='path')
                      | select('search', 'gskssl.*\.rpm$')
                      | reject('search', '_pd\.rpm$')
                      | list }}
      register: gskssl_install_result
      ignore_errors: true
      changed_when: gskssl_install_result.rc == 0

    # Installing API packages (TIVsm-API64, TIVsm-APIcit)
    - name: Install API64 package
      ansible.builtin.command: "rpm -ivh {{ item }}"
      with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-API64\\.') | list }}"
      register: api_install_result
      ignore_errors: false
      changed_when: api_install_result.rc == 0

    - name: Install APIcit package
      ansible.builtin.command: "rpm -ivh {{ item }}"
      with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-APIcit\\.') | list }}"
      register: api_install_result
      ignore_errors: false
      changed_when: api_install_result.rc == 0

    # Installing BA packages (TIVsm-BA, TIVsm-BAcit)
    - name: Install BA package
      ansible.builtin.command: "rpm -ivh  {{ item }}"
      with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-BA\\.') | list }}"
      register: ba_install_result
      ignore_errors: false
      changed_when: ba_install_result.rc == 0

    - name: Install BAcit package
      ansible.builtin.command: "rpm -ivh  {{ item }}"
      with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-BAcit\\.') | list }}"
      register: ba_install_result
      ignore_errors: false
      changed_when: ba_install_result.rc == 0

    - name: Install BAhdw package
      ansible.builtin.command: "rpm -ivh  {{ item }}"
      with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-BAhdw\\.') | list }}"
      register: ba_install_result
      ignore_errors: false
      changed_when: ba_install_result.rc == 0

    - name: Install WebGUI package
      ansible.builtin.command: "rpm -ivh  {{ item }}"
      with_items: "{{ extracted_files.files | map(attribute='path') | select('search', 'TIVsm-WEBGUI') | list }}"
      register: webgui_install_result
      ignore_errors: false
      changed_when: webgui_install_result.rc == 0

    - name: Delete backup directory after restoring the previous state
      ansible.builtin.file:
        path: /opt/baClientPackagesBk
        state: absent
      when: uninstall_result is defined

    - name: Fail the upgrade process
      ansible.builtin.fail:
        msg: >
          Upgrade failed. Restored original configuration files and reinstalled uninstalled packages to maintain system stability.

# ===================== if upgrade is successful ============================

# Restore backup files to their original names
- name: Restoring .bk files to original files after successful upgrade
  ansible.builtin.copy:
    src: "{{ item }}.bk"
    dest: "{{ item }}"
    remote_src: true
    mode: '0644'
  with_items:
    - "/opt/tivoli/tsm/client/ba/bin/dsm.opt"
    - "/opt/tivoli/tsm/client/ba/bin/dsm.sys"
  failed_when: false
  when: is_installation_successful

# Remove the .bk files after restoration
- name: Remove .bk files after restoring to original
  ansible.builtin.file:
    path: "{{ item }}.bk"
    state: absent
  with_items:
    - "/opt/tivoli/tsm/client/ba/bin/dsm.opt"
    - "/opt/tivoli/tsm/client/ba/bin/dsm.sys"
  failed_when: false
  when: is_installation_successful

- name: Delete backup directory on successful upgrade
  ansible.builtin.file:
    path: /opt/baClientPackagesBk
    state: absent
  when: uninstall_result is defined

# Display upgrade success message
- name: Display upgrade success message
  ansible.builtin.debug:
    msg: "BA Client has been successfully upgraded to version {{ ba_client_version }}."
  when: is_installation_successful

# =============== start the daemon =============

# Enable dsmcad.service
- name: Enable dsmcad.service
  ansible.builtin.systemd:
    name: dsmcad.service
    enabled: true
  when: ba_client_start_daemon

# Check if dsmcad.service is enabled
- name: Check if dsmcad.service is enabled
  ansible.builtin.command: "systemctl is-enabled dsmcad.service"
  register: dsmcad_status
  failed_when: false  # Prevent task from failing if the service is not enabled
  when: ba_client_start_daemon
  changed_when: true

# Verify if the service is enabled and provide output
- name: Check if dsmcad.service is successfully enabled
  ansible.builtin.debug:
    msg: "dsmcad started successfully."
  when: ba_client_start_daemon and dsmcad_status.stdout == "enabled"

# Output message if the service is not enabled
- name: Check if dsmcad.service failed to enable
  ansible.builtin.debug:
    msg: "Failed to enable dsmcad.service."
  when: ba_client_start_daemon and dsmcad_status.stdout != "enabled"
