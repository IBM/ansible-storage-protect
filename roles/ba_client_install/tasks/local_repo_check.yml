---
- name: Determine file extension based on OS type
  ansible.builtin.set_fact:
    ba_client_file_ext: "{{ 'tar' if ansible_os_family != 'Windows' else 'exe' }}"
    ba_client_repo: "{{ ba_client_tar_repo if ansible_os_family != 'Windows' else ba_client_exe_repo }}"

- name: Find version-specific installer files in the directory
  ansible.builtin.find:
    paths: "{{ ba_client_repo }}"
    patterns: "{{ ba_client_version }}*.{{ ba_client_file_ext }}"
    file_type: file
  register: client_files
  delegate_to: localhost

- name: Debug the found files
  ansible.builtin.debug:
    var: client_files.files
  delegate_to: localhost

- name: Fail if no installer files are found in the directory
  ansible.builtin.fail:
    msg: "No installer files found matching version {{ ba_client_version }} with extension {{ ba_client_file_ext }} in {{ ba_client_repo }}"
  when: client_files.files | length == 0
  delegate_to: localhost

- name: Set version availability fact
  ansible.builtin.set_fact:
    version_available: "{{ client_files.files | length > 0 }}"

- name: Debug version availability
  ansible.builtin.debug:
    var: version_available

- name: Get the path of the installer file
  ansible.builtin.set_fact:
    ba_client_file_path: >-
      {{
        client_files.files
        | map(attribute='path')
        | list
        | first
      }}
  when: client_files.files | length > 0

- name: Debug the found installer file path
  ansible.builtin.debug:
    msg: "Path of the specified version {{ ba_client_version }}: {{ ba_client_file_path }}"
  when: client_files.files | length > 0
