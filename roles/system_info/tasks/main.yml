---
- name: Collect System Info for Linux
  block:
    - name: Get Memory Information using free -m
      ansible.builtin.command: free -m
      register: memory_info
      ignore_errors: true
      changed_when: false

    - name: Show Memory Information
      ansible.builtin.debug:
        var: memory_info.stdout
      when: memory_info is defined

    - name: Collect Architecture Information
      ansible.builtin.command: lscpu
      register: lscpu_output
      changed_when: false
      ignore_errors: true

    - name: Extract Architecture Info
      ansible.builtin.set_fact:
        architecture: "{{ lscpu_output.stdout | regex_search('Architecture:\\s+(\\S+)', '\\1') }}"
      when: lscpu_output.rc == 0

    - name: Collect OS Information using ansible setup module
      ansible.builtin.set_fact:
        os_name: "{{ ansible_facts['os_family'] }}"
        os_version: "{{ ansible_facts['distribution_version'] }}"

    # Uncomment below if you want to include memory breakdown from `free -m`
    # - name: Extract Disk Space Info (from free -m output)
    #   set_fact:
    #     disk_space:
    #       total_memory: "{{ memory_info.stdout.splitlines()[1].split()[1] }}"
    #       used_memory: "{{ memory_info.stdout.splitlines()[1].split()[2] }}"
    #       free_memory: "{{ memory_info.stdout.splitlines()[1].split()[3] }}"
    #       swap_total: "{{ memory_info.stdout.splitlines()[2].split()[1] }}"
    #       swap_used: "{{ memory_info.stdout.splitlines()[2].split()[2] }}"
    #       swap_free: "{{ memory_info.stdout.splitlines()[2].split()[3] }}"
    #   when: memory_info is defined
    #   ignore_errors: true

    - name: Collect Java Version Information
      ansible.builtin.command: java -version 2>&1
      register: java_version_output
      changed_when: false
      ignore_errors: true

    - name: Extract Java Version
      ansible.builtin.set_fact:
        java_version: "{{ java_version_output.stderr.splitlines()[0] }}"
      when: java_version_output.rc == 0

    - name: Handle Java Version Error
      ansible.builtin.set_fact:
        java_version: "Java is not installed on the system."
      when: java_version_output.rc != 0

    - name: Collect Disk Space Information for /opt
      ansible.builtin.command: df -BM /opt
      register: disk_info
      changed_when: false
      ignore_errors: true

    - name: Parse Disk Space Information for /opt
      ansible.builtin.set_fact:
        disk_space:
          filesystem: "{{ disk_info.stdout.splitlines()[1].split()[0] }}"
          size_mb: "{{ disk_info.stdout.splitlines()[1].split()[1] | regex_replace('M', '') | int }}"
          used_mb: "{{ disk_info.stdout.splitlines()[1].split()[2] | regex_replace('M', '') | int }}"
          available_mb: "{{ disk_info.stdout.splitlines()[1].split()[3] | regex_replace('M', '') | int }}"
          use_percent: "{{ disk_info.stdout.splitlines()[1].split()[4] }}"
          mount_point: "{{ disk_info.stdout.splitlines()[1].split()[5] }}"
      when: disk_info.rc == 0

    - name: Collect All System Information
      ansible.builtin.set_fact:
        system_info:
          Architecture: "{{ architecture }}"
          OS Name: "{{ os_name }}"
          OS Version: "{{ os_version }}"
          Filesystem Disk Space:
            - Free Memory: "{{ disk_space.available_mb }} MB"
          Java Version: "{{ java_version }}"
          Memory Info: "{{ memory_info.stdout }}"

    - name: Show Collected System Information
      ansible.builtin.debug:
        var: system_info

  when: ansible_system != 'AIX'

- name: Collect System Info (AIX)
  block:
    - name: Gather system facts
      ansible.builtin.setup:
      ignore_errors: true
      register: system_info_aix

    # Java version (works on both AIX and Linux)
    - name: Get Java version
      ansible.builtin.command: java -version 2>&1
      register: java_version_output
      ignore_errors: true
      changed_when: false

    - name: Set Java version fact
      ansible.builtin.set_fact:
        java_version: "{{ java_version_output.stderr_lines[0] | default('Java is not installed') }}"

    # Fallback for Memory Info if Ansible memory facts are missing
    - name: Fallback memory info (AIX) using prtconf
      ansible.builtin.command: prtconf | grep 'Memory Size'
      register: aix_memory_output
      changed_when: false

    - name: Extract memory size from AIX prtconf
      ansible.builtin.set_fact:
        aix_memory_mb: "{{ (aix_memory_output.stdout | regex_search('\\d+')).strip() }}"
      when: aix_memory_output.rc == 0

    - name: Collect disk space info for /opt (AIX)
      ansible.builtin.command: df -m /opt
      register: disk_info
      changed_when: false
      ignore_errors: true

    - name: Parse disk space info for AIX
      ansible.builtin.set_fact:
        disk_space:
          filesystem: "{{ disk_info.stdout_lines[1].split()[0] }}"
          size_mb: "{{ disk_info.stdout_lines[1].split()[1] | int }}"
          available_mb: "{{ disk_info.stdout_lines[1].split()[2] | int }}"
          use_percent: "{{ disk_info.stdout_lines[1].split()[3] }}"
          mount_point: "{{ disk_info.stdout_lines[1].split()[6] }}"
      when: disk_info is defined and disk_info.stdout_lines | length > 1

    # Final fact combining all
    - name: Collect All System Information (AIX)
      ansible.builtin.set_fact:
        system_info_aix:
          architecture: "{{ ansible_architecture | default('unknown') }}"
          os_name: "{{ ansible_distribution | default(ansible_os_family | default('unknown')) }}"
          os_version: "{{ ansible_distribution_version | default(ansible_os_version | default('unknown')) }}"
          total_memory_mb: >-
            {{ ansible_memtotal_mb
                | default(ansible_memory_mb.real.total, true)
                | default(aix_memory_mb, true)
                | default('N/A') }}
          real_memory_mb: "{{ ansible_memory_mb.real.total | default('N/A') }}"
          free_memory_mb: "{{ ansible_memory_mb.real.free | default('N/A') }}"
          swap_total_mb: "{{ ansible_memory_mb.swap.total | default('N/A') }}"
          swap_free_mb: "{{ ansible_memory_mb.swap.free | default('N/A') }}"
          java_version: "{{ java_version }}"
          disk_space: "{{ disk_space if disk_space is defined else 'Unavailable' }}"

    - name: Show full system_info_aix (AIX)
      ansible.builtin.debug:
        var: system_info_aix

  when: ansible_system == 'AIX'
