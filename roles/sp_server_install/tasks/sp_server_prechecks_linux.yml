---
# Prechecks:
#  - checks if the binary exists on the control node
#  - checks if the architecture is compatible and disk space is sufficient

- name: Configure SP Server if state is present and sp server is already installed
  block:
    - name: Check if sp server is already install or not
      ansible.builtin.include_tasks: sp_server_postchecks_linux.yml

    - name: Set the action to configure if state is present and sp server is already installed
      ansible.builtin.set_fact:
        sp_server_action: "configure"
      when: sp_server_state == "present" and sp_server_installation_status

    - name: Configure Sp Server
      ansible.builtin.include_tasks: sp_server_configuration_linux.yml
      when: sp_server_action is defined and sp_server_action == "configure"

- name: Perform Prechecks before upgrading sp server
  when: sp_server_state == "upgrade"
  block:
    - name: Extract the sp server from installed packages
      ansible.builtin.set_fact:
        sp_server_installed: "{{ sp_server_installed_components | select('search', 'com.tivoli.dsm.server_') | list }}"
      when: imcl_output_lines | length > 0

    - name: Store the server package string if found
      ansible.builtin.set_fact:
        sp_server_package: "{{ sp_server_installed[0] | string }}"
      when: sp_server_installed is defined and sp_server_installed | length > 0

    - name: Extract installed SP server version using regex
      ansible.builtin.set_fact:
        installed_sp_version: "{{ sp_server_package | regex_search('com\\.tivoli\\.dsm\\.server_([\\d]+\\.[\\d]+\\.[\\d]+)', '\\1') | first | string }}"
      when: sp_server_installed is defined and sp_server_installed | length > 0

    - name: Debug extracted installed SP server version
      ansible.builtin.debug:
        msg: "Installed SP server version is {{ installed_sp_version }}"
      when: installed_sp_version is defined

    - name: Convert installed SP version to a list of integers
      ansible.builtin.set_fact:
        installed_sp_version_list: "{{ installed_sp_version.split('.') | map('int') | list }}"
      when: installed_sp_version is defined and installed_sp_version | length > 0

    - name: Convert passed SP version to a list of integers
      ansible.builtin.set_fact:
        sp_server_version_list: "{{ sp_server_version.split('.') | map('int') | list }}"

    #- name: Debug version lists
    #  ansible.builtin.debug:
    #    msg: "Installed version list: {{ installed_sp_version_list }}, Passed version list: {{ sp_server_version_list }}"

    - name: Set sp_server_action to upgrade if user-passed version is greater than installed version
      ansible.builtin.set_fact:
        sp_server_action: "upgrade"
      when:
        - installed_sp_version_list is defined
        - sp_server_version_list > installed_sp_version_list

    - name: Fail if installed version is greater than or equal to user-passed version
      ansible.builtin.fail:
        msg: "Installed SP server version ({{ installed_sp_version }}) is greater than or equal to the passed version ({{ sp_server_version }}). Upgrade not required."
      when:
        - not (sp_server_version_list > installed_sp_version_list)


- name: Finding SP Server binary locally
  ansible.builtin.find:
    paths: "{{ sp_server_bin_repo }}"
    patterns: "{{ sp_server_version }}*.bin"
  register: file_status
  delegate_to: localhost

- name: Fail if the binary does not exist
  ansible.builtin.fail:
    msg: > 
        The binary file for {{ sp_server_version }}*.bin does not exist in the directory {{ sp_server_bin_repo }}.
        Verify the availability of binary in the specified directory and ensure the correct path is specified.
  when: file_status.matched == 0
  delegate_to: localhost

- name: Storing the found binary file path
  ansible.builtin.set_fact:
    sp_server_binary_file_path: "{{ file_status.files[0].path }}"
  when: file_status.matched > 0
  delegate_to: localhost

- name: Debug the binary path
  debug:
    var: sp_server_binary_file_path

- name: Debug binary path
  debug:
    msg: sp_server_binary_file_path
- name: Gathering system info for compatibility checks
  ansible.builtin.include_role:
    name: system_info

- name: Checking architecture compatibility
  ansible.builtin.set_fact:
    architecture_compatible: "{{ (system_info.Architecture | first) in sp_server_compatible_architectures }}"

- name: Checking available disk space
  ansible.builtin.set_fact:
    avail_disk_space: "{{ disk_space.available_mb | int > 7500 }}"

- name: Compatibility results
  ansible.builtin.debug:
    msg: |
      Architecture check: {{ architecture_compatible }}
      Disk Space: {{ avail_disk_space }}

- name: Compatibility check result
  ansible.builtin.debug:
    msg: "System is compatible"
  when: architecture_compatible and avail_disk_space

- name: Compatibility check result
  ansible.builtin.debug:
    msg: "System is incompatible"
  when: not (architecture_compatible and avail_disk_space)

- name: Fail if system is incompatible
  ansible.builtin.fail:
    msg: >
      System compatibility checks failed. Please ensure the following
      requirements are met: 
      - Compatible architectures: {{ sp_server_compatible_architectures }}
      - Sufficient disk space: > 7500 MB 
      Architecture Found: {{ architecture_compatible }} 
      Current Available Disk Space: {{ avail_disk_space }}
  when: not (architecture_compatible and avail_disk_space)

- name: Set the directory for installation
  ansible.builtin.set_fact:
    sp_server_temp_dest: "{{ sp_server_install_dest }}"
  when: sp_server_action == "install"

- name: Set the directory for upgrade
  ansible.builtin.set_fact:
    sp_server_temp_dest: "{{ sp_server_upgrade_dest }}"
  when: sp_server_action == "upgrade"

- name: Display success message for upgrade or install
  ansible.builtin.debug:
    msg: "Performing: {{ sp_server_action }}"
...
