#- name: Check if Installation Manager (IMCL) exists
#  ansible.builtin.stat:
#    path: "/opt/IBM/InstallationManager/eclipse/tools/imcl"
#  register: imcl_stat
#
#- name: Debug IMCL existence
#  ansible.builtin.debug:
#    msg: "IMCL exists: {{ imcl_stat.stat.exists }}"
#
#- name: Execute command to list installed packages on the remote VM
#  ansible.builtin.command: "{{ imcl_path }} listInstalledPackages"
#  register: imcl_output
#  changed_when: false
#  become: true
#  ignore_errors: true
#  when: imcl_stat.stat.exists  # Only run if the file exists
#
#- name: Ensure imcl_output is defined
#  ansible.builtin.set_fact:
#    imcl_output_lines: "{{ imcl_output.stdout_lines | default([]) }}"
#
#- name: Creating a list of installed packages
#  ansible.builtin.set_fact:
#    sp_server_installed_components: "{{ imcl_output_lines }}"
#  when: imcl_output_lines | length > 0
#
#- name: Check if the SP server package is installed
#  ansible.builtin.set_fact:
#    sp_server_installation_status: true
#  when:
#    - imcl_output_lines | length > 0
#    - imcl_output_lines | select('search', 'com.tivoli.dsm.server') | list | length > 0
#
#...

- name: Check if Installation Manager (IMCL) exists
  ansible.builtin.stat:
    path: "{{ imcl_path }}"
  register: imcl_stat

- name: Execute command to list installed packages
  ansible.builtin.command: "{{ imcl_path }} listInstalledPackages"
  register: imcl_output
  changed_when: false
  ignore_errors: true
  when: imcl_stat.stat.exists

- name: Ensure imcl_output is defined
  ansible.builtin.set_fact:
    imcl_output_lines: "{{ imcl_output.stdout_lines | default([]) }}"

- name: Creating a list of installed packages
  ansible.builtin.set_fact:
    sp_server_installed_components: "{{ imcl_output_lines }}"
  when: imcl_output_lines | length > 0

- name: Check if the SP server package is installed
  ansible.builtin.set_fact:
    sp_server_installation_status: true
  when:
    - imcl_output_lines | length > 0
    - imcl_output_lines | select('search', 'com.tivoli.dsm.server') | list | length > 0

- name: Perform Prechecks before upgrading sp server
  when: sp_server_state == "upgrade"
  block:
    - name: Extract the sp server from installed packages
      ansible.builtin.set_fact:
        sp_server_installed: "{{ sp_server_installed_components | select('search', 'com.tivoli.dsm.server_') | list }}"
      when: imcl_output_lines | length > 0

    - name: Store the server package string if found
      ansible.builtin.set_fact:
        sp_server_package: "{{ sp_server_installed[0] | string }}"
      when: sp_server_installed is defined and sp_server_installed | length > 0

    - name: Extract installed SP server version using regex
      ansible.builtin.set_fact:
        installed_sp_version: "{{ sp_server_package | regex_search('com\\.tivoli\\.dsm\\.server_([\\d]+\\.[\\d]+\\.[\\d]+)', '\\1') | first | string }}"
      when: sp_server_installed is defined and sp_server_installed | length > 0

    - name: Debug extracted installed SP server version
      ansible.builtin.debug:
        msg: "Installed SP server version is {{ installed_sp_version }}"
      when: installed_sp_version is defined

    - name: Convert installed SP version to a list of integers
      ansible.builtin.set_fact:
        installed_sp_version_list: "{{ installed_sp_version.split('.') | map('int') | list }}"
      when: installed_sp_version is defined and installed_sp_version | length > 0

    - name: Convert passed SP version to a list of integers
      ansible.builtin.set_fact:
        sp_server_version_list: "{{ sp_server_version.split('.') | map('int') | list }}"

    #- name: Debug version lists
    #  ansible.builtin.debug:
    #    msg: "Installed version list: {{ installed_sp_version_list }}, Passed version list: {{ sp_server_version_list }}"

    - name: Set sp_server_action to upgrade if user-passed version is greater than installed version
      ansible.builtin.set_fact:
        sp_server_action: "upgrade"
      when:
        - installed_sp_version_list is defined
        - sp_server_version_list > installed_sp_version_list

    - name: Fail if installed version is greater than or equal to user-passed version
      ansible.builtin.fail:
        msg: "Installed SP server version ({{ installed_sp_version }}) is greater than or equal to the passed version ({{ sp_server_version }}). Upgrade not required."
      when:
        - not (sp_server_version_list > installed_sp_version_list)
