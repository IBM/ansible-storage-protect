---
# Variables used:
# sp_server_temp_dest: Temporary directory for binary (e.g., /opt/sp_server_binary/)
# sp_server_binary_file_path: Path to binary file on control node

# Create a temporary directory to store the binary file
- name: Creating /opt/sp_server_binary directory
  ansible.builtin.file:
    path: "{{ sp_server_temp_dest }}"
    state: directory
    mode: '0755'
  when: state == "present"

# Transfer binary to the remote machines
- name: Transferring the binary to the remote host
  ansible.builtin.synchronize:
    src: "{{ sp_server_binary_file_path }}"
    dest: "{{ sp_server_temp_dest }}"
    mode: push
  register: copy_result
  when: state == "present"

# Validate file transfer and show error details
- name: Validating binary transfer
  ansible.builtin.fail:
    msg: >
      Binary transfer to the remote host failed.
      Error details: {{ copy_result.stderr | default('No error details available.') }}
  when: not copy_result is defined and state == "present"

# Ensure the binary is executable
- name: Ensure binary is executable
  ansible.builtin.file:
    path: "{{ sp_server_temp_dest }}/{{ sp_server_binary_file_path | basename }}"
    mode: "0755"
  when: state == "present"

# Generate response.xml for installation
- name: Generate response.xml
  ansible.builtin.template:
    src: sp_server_install_response.xml.j2
    dest: "{{ sp_server_temp_dest }}/response.xml"
  when: state == "present"

# Execute the binary to initialize the repository
- name: Execute binary
  ansible.builtin.command: "./{{ sp_server_binary_file_path | basename }}"
  args:
    chdir: "{{ sp_server_temp_dest }}"
  when: state == "present"

# Execute install.sh with the generated response.xml
- name: Execute install.sh with response.xml
  ansible.builtin.command: "./install.sh -s -input {{ sp_server_temp_dest }}/response.xml -acceptLicense"
  args:
    chdir: "{{ sp_server_temp_dest }}"
  when: state == "present"

# Generate the response file for uninstallation
- name: Generate Response file for uninstalling Sp Server
  ansible.builtin.template:
    src: sp_server_uninstall_response.xml.j2
    dest: "{{ sp_server_temp_dest }}/uninstallResponse.xml"
  when: state == "absent"

# Execute uninstallation
- name: Execute uninstallation
  ansible.builtin.command: "./imcl -s -input {{ sp_server_temp_dest }}/uninstallResponse.xml -acceptLicense"
  args:
    chdir: "/opt/IBM/InstallationManager/eclipse/tools"
  when: state == "absent"

# configure sp_server
- name: Configure SP Server
  ansible.builtin.include_tasks: sp_server_configuration_linux.yml
  when: state == "configure"
