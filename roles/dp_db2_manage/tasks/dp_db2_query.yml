# Ensure DB2 instance profile exists
- name: Check if DB2 instance profile exists
  ansible.builtin.stat:
    path: "/home/{{ db2_instance }}/sqllib/db2profile"
  register: db2profile_check

- name: Fail if DB2 instance profile is missing
  ansible.builtin.fail:
    msg: "DB2 instance profile not found at /home/{{ db2_instance }}/sqllib/db2profile"
  when: not db2profile_check.stat.exists

# Construct the DB2 query command using db2adutl
- name: Construct DB2 query command using db2adutl
  ansible.builtin.set_fact:
    db2_query_cmd: >-
      {{ [
        'db2adutl query',
        (db2_query_type in ['tablespace', 'full']) | ternary(db2_query_type, ''),
        (db2_query_backup_level in ['nonincremental', 'incremental', 'delta']) | ternary(db2_query_backup_level, ''),
        (db2_query_show_inactive | default(false)) | ternary('show inactive', ''),
        (db2_query_type == 'logs' and db2_query_logs_between_start | default('') != '' and db2_query_logs_between_end | default('') != '') | ternary('logs between ' + db2_query_logs_between_start + ' and ' + db2_query_logs_between_end, ''),
        (db2_query_chain | default('') != '') | ternary('chain ' + db2_query_chain | string, ''),
        (db2_query_verbose | default(false)) | ternary('verbose', ''),
        (db2_database | default('') != '') | ternary('db ' + db2_database, ''),
        (db2_query_additional_options | default('') != '') | ternary('options ' + db2_query_additional_options, ''),
        (db2_tsm_password | default('') != '') | ternary("password '" + db2_tsm_password + "'", ''),
        (db2_tsm_nodename | default('') != '') | ternary('nodename ' + db2_tsm_nodename, ''),
        (db2_tsm_owner | default('') != '') | ternary('owner ' + db2_tsm_owner, ''),
        (db2_without_prompting | default(false)) | ternary('without prompting', '')
      ]
      | select('string')
      | reject('equalto', '')
      | join(' ')
      }}

# Display constructed command
- name: Display DB2 query command
  ansible.builtin.debug:
    msg: "DB2 query command: {{ db2_query_cmd }}"

# Execute the db2adutl query command with profile sourced
- name: Execute DB2 query command
  ansible.builtin.shell: |
    source /home/{{ db2_instance }}/sqllib/db2profile
    {{ db2_query_cmd }}
  args:
    executable: /bin/bash
  environment:
    DB2INSTANCE: "{{ db2_instance }}"
  register: query_result
  changed_when: "'DB2' in query_result.stdout or 'DB2' in query_result.stderr"

# Show DB2 query output
- name: Show DB2 query output
  ansible.builtin.debug:
    var: query_result.stdout_lines

# Show errors if any
- name: Show DB2 query errors if any
  ansible.builtin.debug:
    var: query_result.stderr_lines
  when: query_result.rc != 0
